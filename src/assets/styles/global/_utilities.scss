// - - - - - - - - - - - - - - - - - - -
// - - utilities
// global extends, mixins, functions, and utility classes

// - - - - - - - - - - - - - - - - - - -
// - - extends


// - - - - - - - - - - - - - - - - - - -
// - - mixins

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin shadow($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}

// antialiasing mode font rendering
@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/**
 * Aspect-Ratio
 */
 @mixin aspect-ratio($width, $height) {
   position: relative;
   &:before {
     display: block;
     content: "";
     width: 100%;
     padding-top: ($height / $width) * 100%;
   }
   > .content {
     position: absolute;
     top: 0;
     left: 0;
     right: 0;
     bottom: 0;
   }
 }

 // center vertically and/or horizontally an absolute positioned element
 //
 @mixin center($xy:xy) {
   @if $xy == xy {
     left: 50%;
     top: 50%;
     bottom: auto;
     right: auto;
     @include transform(translateX(-50%) translateY(-50%));
   }
   @else if $xy == x {
     left: 50%;
     right: auto;
     @include transform(translateX(-50%));
   }
   @else if $xy == y {
     top: 50%;
     bottom: auto;
     @include transform(translateY(-50%));
   }
 }

// - - - - - - - - - - - - - - - - - - -
// - - functions


/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}

// - - - - - - - - - - - - - - - - - - -
// - - utilities
.contained {
  max-width: $global-container-max-width;
  margin: 0 auto;
  @include clearfix();
}

.fluid-container {
  @include size(100% 100%);
}

.statement-container {
  position: relative;
  @include size(100% 100%);
  .statement-content {
    @include position(absolute, 50% auto auto 50%);
    @include transform(translateY(-50%) translateX(-50%));
  }
}

.logo-text {
  color: $color-2;
}

.overlay {
  @include size(100% 100%);
}
